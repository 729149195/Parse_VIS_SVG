import binVersion from 'bin-version';
import semver from 'semver';
export async function checkSoftware(software = {}) {
    const softwareList = normalizeConfig(software);
    const softwareData = await getVersionData(softwareList);
    const softwareSatisifies = satisifies(softwareData);
    const results = softwareSatisifies;
    return results;
}
export function satisifies(entries = []) {
    return entries.map((item) => {
        if (item.installed) {
            const satisfies = semver.satisfies(item.version, item.semver);
            return { ...item, satisfies };
        }
        else {
            return { ...item, satisfies: undefined };
        }
    });
}
export async function getVersionData(softwareList = []) {
    const results = [];
    for (const software of softwareList) {
        let result = { ...software };
        try {
            const maybeBinVersionArgs = software.flag ? { args: [software.flag] } : undefined;
            const version = await binVersion(software.bin, maybeBinVersionArgs);
            result = { ...result, installed: true, version };
        }
        catch (err) {
            result = { ...result, installed: false, version: undefined };
        }
        results.push(result);
    }
    return results;
}
export function normalizeConfig(software) {
    const results = [];
    for (const [bin, semver] of Object.entries(software)) {
        const item = typeof semver === 'string' ? { bin, semver } : { bin, ...semver };
        results.push(item);
    }
    return results;
}
