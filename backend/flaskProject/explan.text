各个模块介绍：
    CreateGM: 从原始SVG提取基本数据并做第一步格式处理与部分数据运算（如提取初始bbox及将transfrom应用于提取出的bbox上）
    Add_id: 根据layer为每个元素添加唯一id
    Convert_tiHex: 把原数据的所有色值都转为16进制
    TestGM: 用以测试提取的出bbox边界框是否准确
    Gestalt_Edges_Features: 从基本数据中提取两可视节点间的格式塔特征矩阵
    Gestalt_Edges_weight: 根据格式塔特征矩阵计算出节点间的权重
    Community_Detection: 社区检测实现
    Quantification_Basis: 根据各个社区的内部结构和外部结构来推断其被人感知到的顺序
    Statitication: 用以将所有所需数据调整为前端D3可直接调用的数据结构


BBOX的格式：
    rect: bbox = [[x, y], [x + width, y + height], [x + width / 2, y + height / 2]]
    circle: bbox = [[cx - r, cy - r], [cx + r, cy + r], [cx, cy]]
    line: bbox = [[x1, y1], [x2, y2], [(x1 + x2) / 2, (y1 + y2) / 2]]
    ellipse: bbox = [[cx - rx, cy - ry], [cx + rx, cy + ry], [cx, cy]]
    polygon\polyline: bbox = [[x1, y1], [x2, y2]...points中的所有点]
    text\image: bbox = [[x, y], [x + width, y + height], [x + width/2, y + height/2]]
    path: 通过Pcode和Pnum来拟合成line集， 如[line1, line2, line3....]


格式塔特征矩阵：
{
  "color_similarity": {
    "fill_color_difference": 0.0, // 范围[0, 1]，使用CIEDE2000或其他色差算法计算
    "opacity_difference": 0.0, // 范围[0, 1]，直接计算Alpha值差异的相对值
    "brightness_difference": 0.0, // 范围[0, 1]，计算HSL/HSV的L或V值差异
    "saturation_difference": 0.0 // 范围[0, 1]，计算HSL/HSV的S值差异
    "stroke_color_similarity": 0.0 // 边框色相似度，范围[0, 1],使用CIEDE2000或其他色差算法计算, 使用CIEDE2000或其他色差算法计算
    "stroke_width_similarity": 0.0, // 线宽相似度，范围[0, 1]
  },
  "tag_similarity": {
    "tag_match": 0, // 值为1或0，表示是否完全匹配
    "layer_similarity": 0.0, // 范围[0, 1]，基于共同父级数量与总深度的比例
    "text_content_similarity": 0.0 // 范围[0, 1]，使用文本相似度算法，空文本为0
  },
  "position_similarity": {
    "top_edge_similarity": 0.0, // 范围[0, 1]，基于bbox上边界的差异
    "bottom_edge_similarity": 0.0, // 范围[0, 1]，基于bbox下边界的差异
    "left_edge_similarity": 0.0, // 范围[0, 1]，基于bbox左边界的差异
    "right_edge_similarity": 0.0, // 范围[0, 1]，基于bbox右边界的差异
    "area_similarity": 0.0, // 范围[0, 1]，基于节点面积的比例差异
    "overlap_ratio": 0.0 // 范围[0, 1]，两个节点的bbox交集与并集的比例
  }
}


各个json文件的用途：
GMinfo.json: CreateGM从原始数据中提取并初步处理的元素网络
extracted_nodes.json: 从初步网络中提取并二次处理出的可视节点中提取出的节点基本信息
similarity_graph.json: 根据二次提取出的节点基本信息来张开节点之间的格式塔特征矩阵
community_data.json: 用于存储社区检测结果，用于返回前端进行社区节点凸包渲染
attr_num.json: 用以统计节点的属性数据（未完成）
ele_num.json: 用以统计元素的种类和数量
group_data: 用以展示每个社区的内链接强度和外连接强度（未完成）


写一个类，来用从那个json文件中计算各个节点之间的格式塔相似矩阵，并以以下格式输出到另一个json文件中：
{
    "Gestalt_Edges": [
[
                "svg/svg/g_7",
                "svg/svg/g_7/ellipse_1",
                格式塔特征矩阵
            ],
            [
                "svg/svg/g_7",
                "svg/svg/circle_1",
               格式塔特征矩阵
            ],
]
}
先写出这个类的整体框架。
要注意，该extracted_nodes.json文件描述的是svg中的节点的信息，其中有像rect这样的面型节点，也有像path这样的线型节点，它们的区别主要在bbox上，面型节点的bbox内容是bbox[0]指的是该元素的边界框的左上角坐标，bbox[1]指的该元素的边界框的右下角坐标，bbox[2]指的该元素的边界框的中点坐标，而线型元素的bbox是由其拟合的多个bbox组成的bboxs数值，其中的每一个bbox和面型元素定义一致，要使得该类在计算同型元素的格式塔特征矩阵和异型元素的格式塔特征矩阵时要完美合适。
